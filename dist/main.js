(()=>{"use strict";function t(t){const e=new Date(t);return`${["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][e.getDay()]}, ${["January","February","March","April","May","June","July","August","September","October","November","December"][e.getMonth()]} ${e.getDate()}, ${e.getFullYear()}`}function e(t,e,n){let r;return r=void 0===n?`Weather=${t}, Moment=Day.${e}`:`Weather=${t}, Moment=${n=n.is_day?"Day":"Night"}.${e}`,"svg"===e?`./images/icons/${r}`:`./images/backgrounds/${r}`}function n(t,e){return e?`${o(t.day.maxtemp_c)}째c`:`${o(t.temp_c)}째c`}function r(t){return`${o(t.day.mintemp_c)}째c`}function o(t){return Math.ceil(t)}function a(t){const e={Clear:[1e3],Rain:[1063,1069,1180,1183,1186,1189,1192,1195,1198,1201,1237,1240,1243,1246,1249,1252,1261,1264],Storm:[1087,1273,1276,1279,1282],Cloudy:[1006,1009,1030,1072,1117,1135,1147,1150,1153,1168,1171,1204,1207],"Few Clouds":[1003],Snow:[1066,1114,1210,1213,1216,1219,1222,1225,1255,1258]};return Object.keys(e).find((n=>e[n].includes(t)))}function c(t){const e=document.querySelector(".main__error-prompter");e.querySelector(".error-prompter__heading").textContent=t,e.classList.toggle("main__error-prompter--active"),setTimeout((()=>{e.classList.toggle("main__error-prompter--active")}),4e3)}function i(t,e){const n=t.parentElement.parentElement;"main__intro"===n.classList[0]&&("on"===e?n.classList.add("main__intro--form-activated"):n.className="main__intro")}function s(c){(function(o){const c=document.querySelector(".meta-wrapper__location p"),i=document.querySelector(".meta-wrapper__location time"),s=document.querySelector(".meta-wrapper__time time"),l=document.querySelector(".current__temp"),u=document.querySelector(".range__min-to-max"),m=document.querySelector(".weather-condition__string"),d=document.querySelector(".stat-data__illustration"),p=document.querySelector(".header-container__statistics");var _,y;c.textContent=`${(_=o.location).name}, ${_.region} - ${_.country}`,i.textContent=t(o.location.localtime),s.textContent=o.location.localtime.split(" ")[1],l.textContent=n(o.current,!1),u.textContent=(y=l.textContent,`${r(o.forecast.forecastday[0])} / ${y}`),m.textContent=a(o.current.condition.code),d.src=e(m.textContent,"svg",o.current),p.style.backgroundImage=`url("${e(m.textContent,"png",o.current)}")`})(c),function(t){const e={thermalSensation:`${o(t.current.feelslike_c)}째c`,rainProbability:`${t.forecast.forecastday[0].day.daily_chance_of_rain}%`,windSpeed:`${o(t.current.wind_kph)} Km/h`,humidity:`${t.current.humidity}%`,uvIndex:t.current.uv},n=Object.keys(e),r=document.querySelector(".overview-section__list");for(let t=0;t<r.children.length;t++)r.children[t].children[1].textContent=e[n[t]]}(c),function(o){const c=o.forecast.forecastday,i=document.querySelector(".predictions__list");i.innerHTML="";for(let o=1;o<c.length;o++){const s=document.createElement("li"),l=c[o],u=t(l.date).split(",")[0],m=a(l.day.condition.code);s.innerHTML=`<span class="list__day">\n                            ${u.substring(0,3)}\n                              <span class="day__trimmed-part">\n                                ${u.substring(3)}\n                              </span>\n                            </span>\n                            <img src="${e(m,"svg")}" alt="">\n\n                            <p class="list__stats">\n                                <span class="stats__weather">\n                                    <span class="weather__sr-only">Weather Condition</span>\n                                    ${m}\n                                </span>\n\n                                <span class="list__temp-range">\n                                <span class="temp-range__sr-only">Temperature Range</span>\n                                    ${n(l,!0)}\n                                <abbr title="to" class="sr-only">-</abbr>\n                                <span class="temp-range__to">\n                                    ${r(l)}\n                                </span>\n                                </span>\n                            </p>`,i.appendChild(s)}}(c)}function l(t,e){t.style.opacity=0,i(t,"off"),void 0===e&&u(t.nextElementSibling,"disabled"),setTimeout((()=>{t.innerHTML=""}),600)}function u(t,e){"active"===e?t.classList.add("form__submit-btn--active"):t.classList.remove("form__submit-btn--active")}function m(t){t.classList.toggle("form__submit-btn--loading")}!function(){const t=document.querySelectorAll("input"),e=document.querySelectorAll("form"),n=document.querySelectorAll(".form__suggestions-list"),r=document.querySelectorAll(".form__submit-btn");e.forEach((t=>t.addEventListener("submit",(t=>t.preventDefault())))),t.forEach((t=>t.addEventListener("input",(t=>{const e=t.target.value.toLowerCase();var n,r;""!==e?(n=function(t){const e=[];for(const n of data)n.substr(0,t.length).toLowerCase()==t&&e.push(n);return e}(e),(r=t.target.nextElementSibling).innerHTML="",n.forEach((t=>{const e=document.createElement("li");e.innerHTML=`<button>${t}</button>`,r.appendChild(e)})),i(r,"on"),setTimeout((()=>{r.style.opacity=1,u(r.nextElementSibling,"active")}),100)):l(t.target.nextElementSibling)})))),n.forEach((t=>t.addEventListener("click",(t=>{t.target.classList.add("active"),setTimeout((()=>{try{t.target.parentElement.parentElement.previousElementSibling.value=t.target.textContent,l(t.target.parentElement.parentElement,"dontHideBtn")}catch(t){}}),500)})))),r.forEach((t=>t.addEventListener("click",(t=>{const e=t.target.parentElement.children[1].value;if(""!==e){if(!navigator.onLine)return c("Oops! You're currently offline");m(t.target),async function(t){try{const e=await fetch(`http://localhost:3000/weather?location=${t}`);if(console.log(e),e.ok){const t=await e.json();return console.log(t),s(t),new Promise((t=>setTimeout(t,1500)))}throw new Error}catch(t){return console.log(t),c("Location not found"),Promise.reject(t)}}(e).then((()=>function(){const t=document.querySelector("main");t.classList.add("main--dashboard-active"),function(t){document.querySelector(".header-wrapper__header").addEventListener("click",(()=>{t.classList=""}))}(t)}())).catch((t=>{})).finally((()=>{l(t.target.parentElement.children[2]),t.target.parentElement.children[1].value="",m(t.target)}))}}))))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,